// import * as vscode from "vscode";

// export function activate(context: vscode.ExtensionContext) {
// 	vscode.window.showInformationMessage("Easy Alt Extension Activated!!!!");

// 	const provider = vscode.languages.registerCompletionItemProvider(
// 		["html", "jsx", "tsx"],
// 		{
// 			provideCompletionItems(
// 				document: vscode.TextDocument,
// 				position: vscode.Position
// 			) {
// 				const linePrefix = document
// 					.lineAt(position)
// 					.text.substring(0, position.character);

// 				if (!linePrefix.includes('alt="') && !linePrefix.includes("alt='")) {
// 					return undefined;
// 				}

// 				const suggestions = [
// 					"A mountain landscape with snow-capped peaks",
// 					"A modern kitchen with stainless steel appliances",
// 					"A group of people collaborating in an office meeting",
// 				].map((text) => {
// 					const completion = new vscode.CompletionItem(
// 						text,
// 						vscode.CompletionItemKind.Value
// 					);
// 					completion.insertText = text;
// 					completion.detail = "AI Generated Alt Text";
// 					completion.documentation = new vscode.MarkdownString(
// 						`Preview: ${text}\n\n*Generated by Easy Alt*`
// 					);
// 					completion.sortText = "0";
// 					return completion;
// 				});

// 				return suggestions;
// 			},
// 		},
// 		'"',
// 		"'"
// 	);

// 	let disposable = vscode.commands.registerCommand(
// 		"easy-alt.generateAlt",
// 		() => {
// 			const editor = vscode.window.activeTextEditor;
// 			if (!editor) {
// 				return;
// 			}

// 			vscode.commands.executeCommand("editor.action.triggerSuggest");
// 		}
// 	);

// 	context.subscriptions.push(provider, disposable);
// }

import * as vscode from "vscode";
import * as fs from "fs/promises"; // Import promises version for async use
import * as path from "path";

export function activate(context: vscode.ExtensionContext) {
	vscode.window.showInformationMessage("Easy Alt Extension Activated!!!!");

	const provider = vscode.languages.registerCompletionItemProvider(
		["html", "jsx", "tsx"],
		{
			async provideCompletionItems(
				document: vscode.TextDocument,
				position: vscode.Position
			) {
				const lineText = document.lineAt(position).text;
				const linePrefix = lineText.substring(0, position.character);

				if (!linePrefix.includes('alt="') && !linePrefix.includes("alt='")) {
					return undefined;
				}

				// Get image src from the line
				const imgRegex = /<img[^>]*src=["']([^"']+)["'][^>]*>/;
				const imgMatch = lineText.match(imgRegex);

				if (imgMatch) {
					const src = imgMatch[1];
					console.log("Image src attribute:", src);

					if (isRemoteUrl(src)) {
						console.log("Remote image URL:", src);
						console.log("for funnnn");
					} else {
						console.log("IN LOCAL IMAGE BLOCK");
						const workspaceFolder = vscode.workspace.workspaceFolders?.[0];
						if (workspaceFolder) {
							// Remove any leading '/' or './' from src to construct a normalized path
							const cleanSrc = src.replace(/^[./]+/, "");
							// Construct the absolute path within the workspace
							const imagePath = path.resolve(
								workspaceFolder.uri.fsPath,
								cleanSrc
							);

							console.log("Workspace folder path:", workspaceFolder.uri.fsPath);
							console.log("Resolved image path:", imagePath);

							try {
								// Check if the file exists before trying to read it
								await fs.access(imagePath);
								console.log("Image file exists. Attempting to read...");

								// Read the image file as a binary buffer
								const imageBuffer = await fs.readFile(imagePath);
								console.log("Binary image data:", imageBuffer);

								// Optional: Base64 encoding
								console.log(
									"Base64 image data:",
									imageBuffer.toString("base64")
								);
							} catch (error) {
								console.error("Error reading image file:", error);
							}
						} else {
							console.error("No workspace folder found.");
						}
					}
				}

				const suggestions = [
					"A mountain landscape with snow-capped peaks",
					"A modern kitchen with stainless steel appliances",
					"A group of people collaborating in an office meeting",
				].map((text) => {
					const completion = new vscode.CompletionItem(
						text,
						vscode.CompletionItemKind.Value
					);
					completion.insertText = text;
					completion.detail = "AI Generated Alt Text";
					completion.documentation = new vscode.MarkdownString(
						`Preview: ${text}\n\n*Generated by Easy Alt*`
					);
					completion.sortText = "0";
					return completion;
				});

				return suggestions;
			},
		},
		'"',
		"'"
	);

	let disposable = vscode.commands.registerCommand(
		"easy-alt.generateAlt",
		() => {
			const editor = vscode.window.activeTextEditor;
			if (!editor) {
				return;
			}
			vscode.commands.executeCommand("editor.action.triggerSuggest");
		}
	);

	context.subscriptions.push(provider, disposable);
}

function isRemoteUrl(url: string): boolean {
	return url.startsWith("http://") || url.startsWith("https://");
}
